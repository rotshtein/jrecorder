syntax = "proto3";
package recorder_proto;

/*************/
/* Version 1 */
/************/


enum STATUS
{
	RUN = 0;
	STOP = 1;
	ERROR = 2;
	WARNING = 3;
}

enum OPCODE
{
	HEADER = 0;
	ACK = 1;
	NACK = 2;
	SPECTRUM = 3;
	RECORD = 4;
	PLAY_CMD = 5;
	STOP_CMD = 6;
	STATUS_REQUEST = 7;
	STATUS_REPLAY = 8;
	STATUS_MESSAGE = 9;
	CONNECTION_STATUS = 10;
	SPECTRUM_DATA = 11;
}


/*****************************************************************************************************************************/
//
message Header
{
	int32 sequence = 1;
	OPCODE opcode = 2;			// Opcode
	bytes message_data = 3;
}


/*****************************************************************************************************************************/
// 
message SpectrumCommand
{
	double frequency = 1;			// Central frequency in Hz. legal values are 950,000-2,150,000
	double rate = 2;				// sampling rate in Hz - default 100e6
	double gain = 3;				// gain - default is 0; can be 0-31.5
	string filename = 4;			// The pull path for the spectrum pairs in - file location and name
	string application_execute = 5;	// Binary to execute
	double bw = 6;
}

/*****************************************************************************************************************************/
// 
message RecordCommand
{
	double frequency = 1;			// Central frequency in Hz. legal values are 950,000-2,150,000
	double rate = 2;				// sampling rate in Hz - default 100e6
	double gain = 3;				// gain - default is 0; can be 0-31.5
	string filename = 4;			// The pull path for the recorded file location and name
	int32  number_of_samples = 5;	// File size in samples
	string application_execute = 6;	// Binary to execute
	double bw = 7;
}

/*****************************************************************************************************************************/
// 
message PlayCommand
{
	double frequency = 1;			// Central frequency in Hz. legal values are 950,000-2,150,000
	double rate = 2;				// sampling rate in Hz - default 100e6
	double gain = 3;				// gain - default is 0; can be 0-31.5
	string filename = 4;			// The pull path for the recorded file location and name
	bool	loop = 5;				// Transmit the file in loop
	double number_of_samples = 6;	// File size in samples
	string application_execute = 7;	// Binary to execute
	double bw = 8;
}

/*****************************************************************************************************************************/
// This command stops the current running action (spectrum, record or play)
message StopCommand
{

}

/*****************************************************************************************************************************/
// This replay us sent as responce to Spectrum, Record, Play or STOP_CMD
message Ack
{

}

/*****************************************************************************************************************************/
// This replay us sent as responce to Spectrum, Record, Play or STOP_CMD
message Nack
{
	string description = 1;
}

/*****************************************************************************************************************************/
// This should be sent in order to get StatusReplay
message StatusRequest
{

}

// This should be sent in order to get StatusReplay
message StatusMessage
{
	string message = 1;
}


/*****************************************************************************************************************************/
// This replay is sent as response to StatusRequest, ss event for new warning/error or when ever the status changes, new warning 
message StatusReplay
{
	STATUS status = 1;
	string status_description = 2;
	double received_samples = 3;
	double played_samples = 4;
	double error_samples = 5;
	bool warning = 6;
	string warning_message = 7;
	int32 warning_number = 8;
	bool error = 9;
	string error_mMessage = 10;
	int32 error_number = 11;
}

/*****************************************************************************************************************************/
// This replay is sent as response to StatusRequest, ss event for new warning/error or when ever the status changes, new warning
message ConnectionStatus
{
	bool status = 1;
}

/*****************************************************************************************************************************/
// This replay is sent as response to StatusRequest, ss event for new warning/error or when ever the status changes, new warning
message SpectrumData
{
	bytes message_data = 1;
}